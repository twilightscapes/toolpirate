---
import type { CollectionEntry } from "astro:content";
import BlogHero from "@/components/blog/Hero.astro";
import TOC from "@/components/blog/TOC.astro";
import BaseLayout from "./Base.astro";
import GoBack from "@/components/GoBack.astro";

// import YouTubeEmbed from '../components/YouTubeEmbed.astro';

interface Props {
	post: CollectionEntry<"post"> & { data: { youtube?: string } };
}

const { post } = Astro.props;
const {
	data: { description, ogImage, publishDate, title, updatedDate, youtube },
	slug,
} = post;




const socialImage = ogImage ?? `/og-image/${slug}.png`;
const articleDate = updatedDate?.toISOString() ?? publishDate.toISOString();
const { headings } = await post.render();
---
<!-- <ViewTransitions /> -->
<BaseLayout title={title} description={description} articleDate={articleDate} ogImage={socialImage}>
<GoBack />
	<div class="gap-x-10 lg:flex lg:items-start" >
		{!!headings.length && <TOC headings={headings} />}
		
			<article class="" data-pagefind-body>
				<div id="blog-hero" style="width:100vw; z-index: 2;"><BlogHero content={post} /></div>
				{/* Render dynamic elements */}
	
				{!!headings.length && <TOC headings={headings} />}
				<div class="" style={{ padding: "0 4%", width:'98vw', margin:'0 auto' }}>
					<!-- <img src={svgImage} /> -->
	
					<!-- {
						additionalImage && (
							<Fragment>
								<img src={getImagePath(additionalImage)} alt="Additional Image" />
							</Fragment>
						)
					} -->
	
	
					<slot />
				</div>
			</article>
		
	</div>
	<button
	aria-label="Back to Top"
	class="z-90 fixed bottom-8 end-4 flex h-10 w-10 translate-y-28 items-center justify-center rounded-full border-2 border-transparent bg-zinc-200 text-3xl opacity-0 transition-all duration-300 hover:border-zinc-400 data-[show=true]:translate-y-0 data-[show=true]:opacity-100 dark:bg-zinc-700 sm:end-8 sm:h-12 sm:w-12"
	data-show="false"
	id="to-top-btn"
	><svg
		aria-hidden="true"
		class="h-6 w-6"
		fill="none"
		focusable="false"
		stroke="currentColor"
		stroke-width="2"
		viewBox="0 0 24 24"
		xmlns="http://www.w3.org/2000/svg"
	>
		<path d="M4.5 15.75l7.5-7.5 7.5 7.5" stroke-linecap="round" stroke-linejoin="round"></path>
	</svg>
</button>
</>
<script>
	const scrollBtn = document.getElementById("to-top-btn") as HTMLButtonElement;
	const targetHeader = document.getElementById("blog-hero") as HTMLDivElement;

	function callback(entries: IntersectionObserverEntry[]) {
		entries.forEach((entry) => {
			// only show the scroll to top button when the heading is out of view
			scrollBtn.dataset.show = (!entry.isIntersecting).toString();
		});
	}

	scrollBtn.addEventListener("click", () => {
		document.documentElement.scrollTo({ behavior: "smooth", top: 0 });
	});

	const observer = new IntersectionObserver(callback);
	observer.observe(targetHeader);
</script>

