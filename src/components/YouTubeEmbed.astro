---
interface Props {
  url: string;
  title?: string;
  controls?: boolean;
  mute?: boolean;
  loop?: boolean;
  start?: number;
  end?: number;
  useCustomPlayer?: boolean;
}

const { 
  url = '', 
  title = '', 
  controls = true, 
  mute = false, 
  loop = false, 
  start = typeof Astro.props.start === 'number' ? Astro.props.start : 0,
  end = 0,
  useCustomPlayer = true 
} = Astro.props;

function getYouTubeId(url: string) {
  if (!url) return null;
  const regex = /(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/;
  const match = url.match(regex);
  return match ? match[1] : null;
}

const videoId = getYouTubeId(url);
const playerVars: { [key: string]: number | string } = {
  autoplay: 1,
  controls: controls ? 1 : 0,
  mute: mute ? 1 : 0,
  loop: loop ? 1 : 0,
  start: start,
  end: end > 0 ? end : '',
  playlist: videoId ?? '',
};

---

{useCustomPlayer ? (
  <div class="custom-youtube-player" style="display:flex; justify-content:center;">
  <div id="youtube-player" style="width:100%; max-width:1600px; aspect-ratio:16/9;"></div>
    <div class="custom-controls">
      <div class="topblock"></div>
      
      <div class="center-controls">
        <button id="play-pause" class="play-pause-button">►</button>
        {title && <h2 class="video-title title1">{title}</h2>}
      </div>
      <div class="bottom-tray">

        <label for="progress">Progress
          <span style="padding:1.5vh 1rem; background:var(--theme-header); border-radius:var(--border-radius);"><input type="range" id="progress" min="0" max="100" value="0" class="progress-bar"></span>
        </label>

        <label for="volume">Volume
        <span style="padding:1.5vh 1rem; background:var(--theme-header); border-radius:var(--border-radius);"><input type="range" id="volume" min="0" max="100" value="100" class="volume-slider"></span></label>
              
      <label for="mute-icon" style="padding:;">Mute
        <span style="padding:1.3vh 1rem; background:var(--theme-header); border-radius:var(--border-radius);">  <button id="mute" class="control-button">
      <svg id="mute-icon" viewBox="0 0 16 16" height="80px" width="80px" xmlns="http://www.w3.org/2000/svg">
      <path d="M6.5 15c-0.13 0-0.258-0.051-0.354-0.146l-3.854-3.854h-1.793c-0.276 0-0.5-0.224-0.5-0.5v-5c0-0.276 0.224-0.5 0.5-0.5h1.793l3.854-3.854c0.143-0.143 0.358-0.186 0.545-0.108s0.309 0.26 0.309 0.462v13c0 0.202-0.122 0.385-0.309 0.462-0.062 0.026-0.127 0.038-0.191 0.038z"></path>
      </svg></button></span></label>

      </div>      

      <div class="botblock"></div>
    </div>
  </div>
) : (
  <iframe
    width="100%"
    height="450"
    src={`https://www.youtube.com/embed/${videoId}?autoplay=1&controls=${controls ? 1 : 0}&mute=${mute ? 1 : 0}&loop=${loop ? 1 : 0}&start=${start}&end=${end}`}
    title={title}
    frameborder="0"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowfullscreen
    style="aspect-ratio: 16/9; min-height: 80vh;"

  ></iframe>
)}

<script define:vars={{ videoId, playerVars, start, end, loop }}>
  let player;
  let controlsTimeout;

  window.onYouTubeIframeAPIReady = function() {
    player = new YT.Player('youtube-player', {
      height: '100%',
      width: '100%',
      videoId: videoId,
      playerVars: playerVars,
      events: {
        'onReady': onPlayerReady,
      }
    });
  }

  function showControls() {
    const controls = document.querySelector('.custom-controls');
    controls.style.opacity = '1';
    clearTimeout(controlsTimeout);
  }

  function hideControls() {
    const controls = document.querySelector('.custom-controls');
    controlsTimeout = setTimeout(() => {
      if (player && player.getPlayerState() == YT.PlayerState.PLAYING) {
        controls.style.opacity = '0';
      }
    }, 3000);
  }

  function onPlayerReady(event) {
    const muteButton = document.getElementById('mute');
    const muteIcon = muteButton.querySelector('svg');

    const playerArea = document.querySelector('.custom-youtube-player');
    playerArea.addEventListener('click', function() {
      if (player.getPlayerState() == YT.PlayerState.PLAYING) {
        player.pauseVideo();
      } else {
        player.playVideo();
      }
    });

    const playPauseButton = document.getElementById('play-pause');
    const progressBar = document.getElementById('progress');
    function updatePlayPauseButton() {
      if (playPauseButton) {
        playPauseButton.textContent = player.getPlayerState() == YT.PlayerState.PLAYING ? '❚❚' : '▶';
      }
    }

    player.addEventListener('onStateChange', updatePlayPauseButton);

    if (playPauseButton) {
      playPauseButton.addEventListener('click', function() {
        if (player.getPlayerState() == YT.PlayerState.PLAYING) {
          player.pauseVideo();
        } else {
          player.playVideo();
        }
      });
    }
    if (muteButton) {
      const muteIcon = document.getElementById('mute-icon');
      const unmutedPath = "M6.5 15c-0.13 0-0.258-0.051-0.354-0.146l-3.854-3.854h-1.793c-0.276 0-0.5-0.224-0.5-0.5v-5c0-0.276 0.224-0.5 0.5-0.5h1.793l3.854-3.854c0.143-0.143 0.358-0.186 0.545-0.108s0.309 0.26 0.309 0.462v13c0 0.202-0.122 0.385-0.309 0.462-0.062 0.026-0.127 0.038-0.191 0.038z";
      const mutedPath = "M15 9.674v1.326h-1.326l-1.674-1.674-1.674 1.674h-1.326v-1.326l1.674-1.674-1.674-1.674v-1.326h1.326l1.674 1.674 1.674-1.674h1.326v1.326l-1.674 1.674 1.674 1.674z M6.5 15c-0.13 0-0.258-0.051-0.354-0.146l-3.854-3.854h-1.793c-0.276 0-0.5-0.224-0.5-0.5v-5c0-0.276 0.224-0.5 0.5-0.5h1.793l3.854-3.854c0.143-0.143 0.358-0.186 0.545-0.108s0.309 0.26 0.309 0.462v13c0 0.202-0.122 0.385-0.309 0.462-0.062 0.026-0.127 0.038-0.191 0.038z";

      function updateMuteButton() {
        muteIcon.innerHTML = `<path d="${player.isMuted() ? mutedPath : unmutedPath}"></path>`;
      }

      updateMuteButton(); // Initial state

      muteButton.addEventListener('click', function() {
        const currentTime = player.getCurrentTime();
        if (player.isMuted()) {
          player.unMute();
        } else {
          player.mute();
        }
        player.seekTo(currentTime, true);
        updateMuteButton();
      });

      player.addEventListener('onVolumeChange', updateMuteButton);
    }
    if (progressBar) {
      player.addEventListener('onStateChange', function(event) {
        if (event.data == YT.PlayerState.PLAYING) {
          updateProgressBar();
        }
      });

      function updateSliderBackground(slider) {
        const value = (slider.value - slider.min) / (slider.max - slider.min) * 100;
        slider.style.background = `linear-gradient(to right, var(--theme-accent2) ${value}%, rgba(0, 0, 0, 0.5) ${value}%)`;
      }

      progressBar.addEventListener('input', function() {
        updateSliderBackground(this);
        const time = player.getDuration() * (this.value / 100);
        player.seekTo(time, true);
      });

      // Update progress bar continuously
      function updateProgressBar() {
        if (player && player.getCurrentTime && player.getDuration) {
          const progress = (player.getCurrentTime() / player.getDuration()) * 100;
          progressBar.value = progress;
          updateSliderBackground(progressBar);
        }
        requestAnimationFrame(updateProgressBar);
      }

      updateProgressBar();
    }

    const volumeSlider = document.getElementById('volume');
    if (volumeSlider) {
      volumeSlider.addEventListener('input', function() {
        updateSliderBackground(this);
        player.setVolume(this.value);
      });
    }

    if (loop) {
      player.addEventListener('onStateChange', function(event) {
        if (event.data === YT.PlayerState.ENDED) {
          player.cueVideoById({
            videoId: videoId,
            startSeconds: start,
            endSeconds: end
          });
          player.playVideo();
        }
      });
    }
    const controls = document.querySelector('.custom-controls');
    controls.addEventListener('touchstart', showControls);
    controls.addEventListener('touchend', hideControls);
    player.addEventListener('onStateChange', function(event) {
      if (event.data === YT.PlayerState.PLAYING) {
        hideControls();
        checkAndLoop();
      } else if (event.data === YT.PlayerState.PAUSED || event.data === YT.PlayerState.ENDED) {
        showControls();
      }
    });
  }

  function updateProgressBar() {
    const progressBar = document.getElementById('progress');
    if (progressBar) {
      const interval = setInterval(function() {
        const progress = (player.getCurrentTime() / player.getDuration()) * 100;
        progressBar.value = progress;
        if (player.getPlayerState() !== YT.PlayerState.PLAYING) {
          clearInterval(interval);
        }
      }, 1000);
    }
  }

  function checkAndLoop() {
    const checkInterval = setInterval(() => {
      const currentTime = player.getCurrentTime();
      const videoStart = start || 0;
      if (end > 0) {
        if (currentTime >= end || currentTime < videoStart) {
          player.seekTo(videoStart, true);
          player.playVideo();
        }
      } else {
        if (currentTime >= player.getDuration()) {
          player.seekTo(videoStart, true);
          player.playVideo();
        }
      }
    }, 100);
  }

  const tag = document.createElement('script');
  tag.src = "https://www.youtube.com/iframe_api";
  const firstScriptTag = document.getElementsByTagName('script')[0];
  if (firstScriptTag.parentNode) {
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
  }
</script>

<style>
  .topblock{display:flex; width:100%; justify-content: center; position: absolute; top:0; height:60px; background:#000; z-index: 0;}
  .botblock{display:flex; width:100%; justify-content: center; position: absolute; bottom:0; height:220px; background:#000; z-index: 0;}

  @media (max-width: 48rem) {
    .topblock{display:flex; width:100%; justify-content: center; position: absolute; top:0; height:0px; background:#000;}
    .botblock{display:flex; width:100%; justify-content: center; position: absolute; bottom:0; height:50px; background:#000; z-index: 0;}
    .youtube-player{margin-top:60px;}
    .custom-youtube-player{margin-top:60px !important;}
    .bottom-tray{padding-bottom: 0 !important;}
  }

  .custom-youtube-player {
    width: 100vw;
    max-width: 100%;
    margin: 0;
    padding: 0;
    position: relative;
    color:#fff;
  }
  #youtube-player {

    aspect-ratio: auto;
  }
  .custom-controls {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    z-index: 1;
    background-color: rgba(0, 0, 0, 0.5);
    opacity: 0;
    transition: opacity 0.3s ease, background-color 0.3s ease;
    -webkit-backdrop-filter: blur(5px);
    backdrop-filter: blur(5px);
  }
  .custom-controls:hover {
    opacity: 1;
  }
  .custom-controls.paused {
    opacity: 1;
    background-color: rgba(0, 0, 0, .5); 
  }
  .center-controls {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
  }
  .play-pause-button {
    font-size: 3rem;
    background: none;
    border: none;
    color: white;
    cursor: pointer;
  }
  .video-title {
    color: white;
    text-align: center;
    margin-top: 1rem;
    font-size:clamp(1.4rem,3.9vw,4rem);
  }
  .bottom-tray {
    display: flex;
    align-items: center;
    padding: 0 0 8vh 0;
    background-color: rgba(0, 0, 0, 0.7);
    width:100%;
    justify-content: center;
    gap:5vw;
    z-index: 2;
    -webkit-backdrop-filter: blur(10px);
    backdrop-filter: blur(10px);
  }
  

  #mute{color:var(--theme-accent2); width:100%; filter: brightness(1.5);}

  label{display:flex; flex-direction: column; gap:10px; font-size: clamp(.8rem,.9vw,1rem); align-items: center; padding-bottom: 10px; filter:}

  :root[data-theme="dark"] label{filter: brightness(4.5);}

  #mute svg .volume-icon { display: block; }
  #mute svg .muted-icon { display: none; }
  #mute.muted svg .volume-icon { display: none; }
  #mute.muted svg .muted-icon { display: block; }

  #mute svg {  width: 24px;
  height: 24px;
  fill: currentColor;
  filter: brightness(2.5);
}

#mute svg path {
  fill: currentColor;
}



input[type="range"] {
  -webkit-appearance: none;
  width: 100%;
  background: rgba(255, 255, 255, 0.6);
  background: var(--theme-accent2);
  border-radius: 5px;
  background-image: linear-gradient(#fff, var(--theme-accent2)) ;
  background-size: 0% 100%;
  background-repeat: no-repeat;
  height: 10px;
}

input[type="range"]::-webkit-slider-thumb {
  -webkit-appearance: none;
  height: 20px;
  width: 20px;
  border-radius: 50%;
  background-image: linear-gradient(#222, #333);
  cursor: ew-resize;
  box-shadow: 0 0 2px 0 #555;
  transition: background .3s ease-in-out;
}

input[type="range"]::-moz-range-thumb, input[type="range"]::-ms-thumb {
  -webkit-appearance: none;
  height: 30px;
  width: 30px;
  border-radius: 50%;
  background: var(--theme-accent2);
  cursor: ew-resize;
  box-shadow: 0 0 2px 0 #555;
  transition: background .3s ease-in-out;
  filter: brightness(1.5);
}





</style>